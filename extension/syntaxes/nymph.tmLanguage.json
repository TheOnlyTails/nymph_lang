{
	"name": "Nymph",
	"scopeName": "source.nymph",
	"fileTypes": [ "nym" ],
	"patterns": [
		{ "include": "#comments" },
		{ "include": "#strings" },
		{ "include": "#characters" },
		{ "include": "#numbers" },
		{ "include": "#keywords" },
		{ "include": "#label" },
		{ "include": "#operators" },
		{ "include": "#punctuation" },
		{ "include": "#type-expressions" },
		{ "include": "#struct-fields" },
		{ "include": "#member-access" },
		{ "include": "#collection-literals" },
		{ "include": "#function-call" },
		{ "include": "#index-access" }
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.nymph",
					"match": "//.*$"
				},
				{
					"name": "comment.block.nymph",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.nymph",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.nymph",
					"match": "\\\\(n|r|t|\\\\|\"|'|u[0-9A-Fa-f]{4})"
				},
				{
					"name": "meta.interpolation.nymph",
					"begin": "\\${",
					"beginCaptures": { "0": { "name": "punctuation.definition.template-expression.begin.nymph" } },
					"end": "}",
					"endCaptures": { "0": { "name": "punctuation.definition.template-expression.end.nymph" } },
					"contentName": "meta.embedded.line.nymph",
					"patterns": [
						{ "include": "#literals" },
						{ "include": "#keywords" },
						{ "include": "#operators" },
						{ "include": "#type-expressions" },
						{ "include": "#member-access" }
					]
				}
			]
		},
		"characters": {
			"name": "string.quoted.single.nymph",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.nymph",
					"match": "\\\\(n|r|t|\\\\|\"|'|u[0-9A-Fa-f]{4})"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.binary.nymph",
					"match": "-?0[bB][01](_?[01])*(?!\\w)"
				},
				{
					"name": "constant.numeric.octal.nymph",
					"match": "-?0[oO][0-7](_?[0-7])*(?!\\w)"
				},
				{
					"name": "constant.numeric.hex.nymph",
					"match": "-?0[xX][a-fA-F\\d](_?[a-fA-F\\d])*(?!\\w)(?!\\w)"
				},
				{
					"name": "constant.numeric.decimal.nymph",
					"match": "-?\\d(_?\\d)*(?!\\w)"
				},
				{
					"name": "constant.numeric.float.nymph",
					"match": "-?\\d(_?\\d)*(\\.\\d(_?\\d)*)?([eE][-+]?\\d(_?\\d)*)?[fF]?(?!\\w)"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.nymph",
					"match": "\\b(if|else|while|for|match|return|break|continue)\\b"
				},
				{
					"name": "keyword.other.nymph",
					"match": "\\b(func|let|mut|type|struct|enum|interface|impl|namespace|external|import|with|async|await)\\b"
				},
				{
					"name": "keyword.operator.comparison.nymph",
					"match": "\\b(is|in)\\b"
				},
				{
					"name": "keyword.operator.casting.nymph",
					"match": "\\b(as)\\b"
				},
				{
					"name": "storage.modifier.nymph",
					"match": "\\b(public|internal|private)\\b"
				},
				{
					"name": "entity.name.type.builtin.nymph",
					"match": "\\b(int|float|boolean|char|string|void|never|self)\\b"
				},
				{
					"name": "constant.language.nymph",
					"match": "\\b(true|false|this)\\b"
				},
				{
					"match": "\\b([A-Z][\\p{XID_Continue}]*)\\.([A-Z][\\p{XID_Continue}]*)\\b",
					"captures": {
						"1": { "name": "entity.name.type.nymph" },
						"2": { "name": "entity.name.type.enum.nymph" }
					}
				},
				{
					"match": "\\b([\\p{XID_Start}_][\\p{XID_Continue}]*)\\s*(?=\\()",
					"name": "entity.name.function.nymph"
				},
				{
					"match": "\\b(this)\\b(?=\\s*\\.)",
					"name": "variable.language.this.nymph"
				},
				{
					"name": "variable.other.nymph",
					"match": "[\\p{XID_Start}_][\\p{XID_Continue}]*"
				}
			]
		},
		"label": {
			"match": "([\\p{XID_Start}_][\\p{XID_Continue}]*)\\s*(@)",
			"captures": {
				"1": { "name": "entity.name.label.nymph" },
				"2": { "name": "punctuation.separator.label.nymph" }
			}
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.range.nymph",
					"match": "\\.\\.=|\\.\\."
				},
				{
					"name": "keyword.operator.arrow.nymph",
					"match": "->"
				},
				{
					"name": "keyword.operator.assignment.nymph",
					"match": "="
				},
				{
					"name": "keyword.operator.arithmetic.nymph",
					"match": "\\*\\*=?|\\+=|-=|\\*=|/=|%=|(?<![<>=+\\-*/&|^~.])\\+|(?<![<>=+\\-*/&|^~.])\\-(?!>)|(?<![<>=+\\-*/&|^~])\\*|(?<![<>=+\\-*/&|^~])/|(?<![<>=+\\-*/&|^~])%"
				},
				{
					"name": "keyword.operator.logical.nymph",
					"match": "&&=?|\\|\\|=?|!|\\?\\?|\\?\\.|\\?"
				},
				{
					"name": "keyword.operator.comparison.nymph",
					"match": "==|!=|<|>|<=|>=|!is|!in"
				},
				{
					"name": "keyword.operator.bitwise.nymph",
					"match": "&=?|\\|=?|\\^=?|~=?|<<=?|>>=?"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.separator.nymph",
					"match": ",|\\.|::|:"
				},
				{
					"name": "punctuation.terminator.nymph",
					"match": ";"
				},
				{
					"name": "punctuation.accessor.nymph",
					"match": "\\.|\\?\\."
				},
				{
					"name": "punctuation.definition.parameters.nymph",
					"match": "\\(|\\)|\\[|\\]|\\{|\\}"
				},
				{
					"name": "punctuation.definition.interpolation.nymph",
					"match": "\\$\\{|\\}"
				},
				{
					"name": "punctuation.definition.collection.nymph",
					"match": "#\\[|#\\{|#\\("
				}
			]
		},
		"type-expressions": {
			"patterns": [
				{
					"match": "\\b(int|float|boolean|char|string|void|never|self)\\b",
					"name": "support.type.builtin.nymph"
				},
				{
					"begin": "\\b([A-Z][\\p{XID_Continue}]*)\\s*(<)",
					"beginCaptures": {
						"1": { "name": "entity.name.type.nymph" },
						"2": { "name": "punctuation.definition.generic.begin.nymph" }
					},
					"end": ">",
					"endCaptures": { "0": { "name": "punctuation.definition.generic.end.nymph" } },
					"patterns": [ { "include": "#type-expressions" } ]
				},
				{
					"match": "\\b[A-Z][\\p{XID_Continue}]*\\b",
					"name": "entity.name.type.nymph"
				}
			]
		},
		"struct-fields": {
			"patterns": [
				{
					"match": "\\b(public|internal|private)\\s+([\\p{XID_Start}][\\p{XID_Continue}]*)\\s*:",
					"captures": {
						"1": { "name": "storage.modifier.nymph" },
						"2": { "name": "variable.other.property.nymph" }
					}
				},
				{
					"match": "\\b([\\p{XID_Start}][\\p{XID_Continue}]*)\\s*:",
					"captures": { "1": { "name": "variable.other.property.nymph" } }
				}
			]
		},
		"member-access": {
			"match": "\\.\\s*([\\p{XID_Start}][\\p{XID_Continue}]*)",
			"captures": { "1": { "name": "variable.other.member.nymph" } }
		},
		"expression": {
			"patterns": [
				{ "include": "#literals" },
				{ "include": "#keywords" },
				{ "include": "#operators" },
				{ "include": "#type-expressions" },
				{ "include": "#member-access" },
				{ "include": "#collection-literals" },
				{ "include": "#function-call" },
				{ "include": "#index-access" }
			]
		},
		"literals": {
			"patterns": [
				{ "include": "#strings" },
				{ "include": "#numbers" },
				{ "include": "#characters" }
			]
		},
		"collection-literals": {
			"patterns": [
				{
					"name": "meta.list.nymph",
					"begin": "#\\[",
					"beginCaptures": { "0": { "name": "punctuation.definition.list.begin.nymph" } },
					"end": "\\]",
					"endCaptures": { "0": { "name": "punctuation.definition.list.end.nymph" } },
					"patterns": [
						{ "include": "#expression" },
						{
							"match": ",",
							"name": "punctuation.separator.comma.nymph"
						}
					]
				},
				{
					"name": "meta.tuple.nymph",
					"begin": "#\\(",
					"beginCaptures": { "0": { "name": "punctuation.definition.tuple.begin.nymph" } },
					"end": "\\)",
					"endCaptures": { "0": { "name": "punctuation.definition.tuple.end.nymph" } },
					"patterns": [
						{ "include": "#expression" },
						{
							"match": ",",
							"name": "punctuation.separator.comma.nymph"
						}
					]
				},
				{
					"name": "meta.map.nymph",
					"begin": "#{",
					"beginCaptures": { "0": { "name": "punctuation.definition.map.begin.nymph" } },
					"end": "}",
					"endCaptures": { "0": { "name": "punctuation.definition.map.end.nymph" } },
					"patterns": [
						{ "include": "#expression" },
						{
							"match": ":",
							"name": "punctuation.separator.key-value.nymph"
						},
						{
							"match": ",",
							"name": "punctuation.separator.comma.nymph"
						}
					]
				}
			]
		},
		"function-call": {
			"patterns": [
				{
					"name": "meta.function-call.nymph",
					"begin": "([\\p{XID_Start}_][\\p{XID_Continue}]*)\\s*(?:<)",
					"beginCaptures": {
						"1": { "name": "entity.name.function.nymph" },
						"2": { "name": "punctuation.definition.generic.begin.nymph" }
					},
					"end": ">\\s*\\(",
					"endCaptures": { "0": { "name": "punctuation.definition.parameters.begin.nymph" } },
					"patterns": [ { "include": "#type-expressions" } ]
				},
				{
					"name": "meta.function-call.nymph",
					"begin": "([\\p{XID_Start}_][\\p{XID_Continue}]*)\\s*(\\()",
					"beginCaptures": {
						"1": { "name": "entity.name.function.nymph" },
						"2": { "name": "punctuation.definition.parameters.begin.nymph" }
					},
					"end": "\\)",
					"endCaptures": { "0": { "name": "punctuation.definition.parameters.end.nymph" } },
					"patterns": [
						{ "include": "#expression" },
						{
							"match": ",",
							"name": "punctuation.separator.comma.nymph"
						}
					]
				}
			]
		},
		"index-access": {
			"name": "meta.index-access.nymph",
			"begin": "(\\?)?\\[",
			"beginCaptures": {
				"0": { "name": "punctuation.definition.index.begin.nymph" },
				"1": { "name": "keyword.operator.optional-chaining.nymph" }
			},
			"end": "\\]",
			"endCaptures": { "0": { "name": "punctuation.definition.index.end.nymph" } },
			"patterns": [ { "include": "#expression" } ]
		}
	}
}