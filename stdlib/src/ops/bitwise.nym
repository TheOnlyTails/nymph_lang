interface LeftShift<Other, Output> {
  func shl(other: Other): Output
}

impl LeftShift<Other = int, Output = int> for int {
  external func shl(other: int): int
}

interface RightShift<Other, Output> {
  func shr(other: Other): Output
}

impl RightShift<Other = int, Output = int> for int {
  external func shr(other: int): int
}

interface BitAnd<Other, Output> {
  func bit_and(other: Other): Output
}

impl BitAnd<Other = int, Output = int> for int {
  external func bit_and(other: int): int
}

interface BitOr<Other, Output> {
  func bit_or(other: Other): Output
}

impl BitOr<Other = int, Output = int> for int {
  external func bit_or(other: int): int
}

interface BitXor<Other, Output> {
  func bit_xor(other: Other): Output
}

impl BitXor<Other = int, Output = int> for int {
  external func bit_xor(other: int): int
}

interface BitNot<Output> {
  func bit_not(): Output
}

impl BitNot<Output = int> for int {
  external func bit_not(): int
}
